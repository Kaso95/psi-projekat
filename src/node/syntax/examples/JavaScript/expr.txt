expr[1]{ expr[1+] s* "," s* expr[2+] }
expr[2]{ "yield" s+ expr[2+] }
expr[3]{ expr[4+] s* opAssign "=" s* expr[3+] }
  opAssign{ "|" | "^" | "&" | ">>>" | ">>" | "<<" | "%" | "/" | "**" | "*" | "+" | "-" | "" }
expr[4]{ expr[5+] s* "?" s* expr[4+] s* ":" s* expr[4+] }
expr[5]{ expr[5+] s* "||" s* expr[6+] }
expr[6]{ expr[6+] s* "&&" s* expr[7+] }
expr[7]{ expr[7+] s* "|" s* expr[8+] }
expr[8]{ expr[8+] s* "^" s* expr[9+] }
expr[9]{ expr[9+] s* "&" s* expr[10+] }
expr[10]{ expr[10+] s* opEqual s* expr[11+] }
  opEqual{ "===" | "!==" | "==" | "!=" }
expr[11]{ comp | opIn | opInstanceof }
  comp{ expr[11+] s* opComp s* expr[12+] }
    opComp{ "<" | "<=" | ">" | ">=" }
  opIn{ expr[11+] s+ "in" s+ expr[12+] }
  opInstanceof{ expr[11+] s+ "instanceof" s+ expr[12+] }
expr[12]{ expr[12+] s* opShift s* expr[13+] }
  opShift{ "<<" | ">>>" | ">>" }
expr[13]{ expr[13+] s* opAddSub s* expr[14+] }
  opAddSub{ "+" | "-" }.not{ "++" | "--" }
expr[14]{ expr[14+] s* opMulDivMod s* expr[15+] }
  opMulDivMod{ "*" | "/" | "%" }
expr[15]{ expr[16+] s* "**" s* expr[15+] }
expr[16]{ opUnary expr[16+] }
  opUnary{ opUnary1 s* | opUnary2 s+ }
    opUnary1{ "!" | "~" | "++" | "--" | "+" | "-" }
    opUnary2{ "typeof" | "void" | "delete" | "await" }
expr[17]{ expr[18+] s* opPostfix }
  opPostfix{ "++" | "--" }
expr[18]{ "new" s+ expr[18+] }
expr[19]{ memberAccess | computedMemberAccess | newWithArgs | functionCall }
  memberAccess{ expr[19+] s* "." s* ident }
  computedMemberAccess{ expr[19+] s* "[" s* expr s* "]" }
  newWithArgs{ "new" s+ expr[19+] s* "(" s* expr[2+]*argSep s* ")" }
  functionCall{ expr[19+] s* "(" s* expr[2+]*argSep s* ")" }
expr[20]{ "(" s* expr s* ")" }
expr[21]{ elem }

argSep{ s* "," s* }